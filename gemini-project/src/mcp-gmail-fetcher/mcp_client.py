# pip install google-generativeai mcp
import asyncio
import os
# Add json import for formatting output
import json
from datetime import datetime
from google import genai
from google.genai import types
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client
import tool_gmail_api
from dotenv import load_dotenv
import markdown

# Load environment variables from .env file
load_dotenv()

api_key = os.environ["GEMINI_API_KEY"]
client = genai.Client(api_key=api_key)

# print(os.getcwd())
# Re-add StdioServerParameters, setting args for stdio
server_params = StdioServerParameters(
    command="../.venv/bin/python",
    args=["src/mcp-gmail-fetcher/mcp_server.py",
          "--connection_type", "stdio"],
    cwd=".",
    env={"GMAIL_API_KEY": "apikey"},
)

async def run(prompt_content):
    # Remove debug prints
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:

            # prompt = f"send this instruction to gemini flash model : please tell me what day is it today ?"
            await session.initialize()
            # Remove debug prints

            mcp_tools = await session.list_tools()
            # Remove debug prints
            tools = [
                types.Tool(
                    function_declarations=[
                        {
                            "name": tool.name,
                            "description": tool.description,
                            "parameters": {
                                k: v
                                for k, v in tool.inputSchema.items()
                                if k not in ["additionalProperties", "$schema"]
                            },
                        }
                    ]
                )
                for tool in mcp_tools.tools
            ]
            # Remove debug prints

            response = client.models.generate_content(
                model="gemini-2.5-flash",
                contents=prompt_content,
                config=types.GenerateContentConfig(
                    temperature=0,
                    tools=tools,
                ),
            )

            # Remove raw response print
            if response.candidates[0].content.parts[0].function_call:
                function_call = response.candidates[0].content.parts[0].function_call

                result = await session.call_tool(
                    function_call.name, arguments=dict(function_call.args)
                )
                return result


                # Parse and print formatted JSON result

            else:
                print("No function call was generated by the model.")
                if response.text:
                     print("Model response:")
                     print(response.text)



if __name__ == "__main__":

    startdate = "2025-06-21"
    enddate = "2025-06-21"
    # Revert main block
    gemini_prompt_content = [
                types.Part.from_text(
                    text=f"Please fetch my emails from {startdate} to {enddate}")
            ]

    results = asyncio.run(run( prompt_content = gemini_prompt_content))

    gmail_data = json.loads(results.content[0].text)
    emails_json_string = json.dumps(gmail_data, indent=2)
    gemini_prompt_content = [
        types.Part.from_text(text = "send following instruction to gemini flash model : "),
            types.Part.from_text(
                text="Here is a JSON array of emails received between " + f"{startdate} and {enddate}. " + "Please analyze these emails, quick summary of all of them, make focus on personal emails3. Help me draft answers if necessary, and remove the marketing and promotion contains\n"),
            types.Part.from_text(text=emails_json_string)
        ]
    results = asyncio.run(run( prompt_content = gemini_prompt_content))


    gemini_prompt_content = [
        types.Part.from_text(text = "send following instruction to gemini text to voice model for the emails received between " f"{startdate} and {enddate}. : "),
            types.Part.from_text(
                text=results.content[0].text)
    ]
    wavefile_res = asyncio.run(run( prompt_content = gemini_prompt_content))
    html_content = markdown.markdown(results.content[0].text)

    tool_gmail_api.send_email_with_attachment("initnas@gmail.com", "initnas@gmail.com",
                                              f"Email summary {startdate} - {startdate}", html_content,
                                              wavefile_res.content[0].text)


    print(wavefile_res)
